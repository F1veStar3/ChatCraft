name: CICD

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: 3.13

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: python manage.py test



#  build:
#    runs-on: [ubuntu-latest]
#    defaults:
#      run:
#        working-directory: './auth_system'
#    steps:
#      - name: Checkout source
#        uses: actions/checkout@v3
#      - name: Login to docker hub
#        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
#      - name: Build docker image
#        run: docker build -t brandnorth/fastapi-therascribe:latest .
#      - name: Publish image to docker hub
#        run: docker push brandnorth/fastapi-therascribe:latest
#
#  deploy:
#    needs: build
#    runs-on: self-hosted
#    environment: production
#    steps:
#      - name: Delete old container
#        run: sudo docker compose -f /home/ubuntu/docker_data/prod/docker-compose.yml down | sudo docker rm -f fastapi-therascribe-container
#
#      - name: Delete unused image
#        run: sudo docker image prune -f
#
#      - name: Remove existing .env file
#        run: rm -f .env
#
#      - name: Create environment file
#        run: |
#          echo "ADMIN_KEY=${{ secrets.ADMIN_KEY }}" >> .env
#          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
#          echo "MAIL_HOST=${{ secrets.MAIL_HOST }}" >> .env
#          echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env
#          echo "MAIL_PORT=${{ secrets.MAIL_PORT }}" >> .env
#          echo "MAIL_USER=${{ secrets.MAIL_USER }}" >> .env
#          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
#          echo "BASE_URL=${{ secrets.PROD_BASE_URL }}" >> .env
#          echo "FRONT_BASE_URL=${{ secrets.PROD_FRONT_BASE_URL }}" >> .env
#          echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env
#          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .env
#          echo "REDIS_USER=${{ secrets.REDIS_USER }}" >> .env
#          echo "REDIS_USER_PASSWORD=${{ secrets.REDIS_USER_PASSWORD }}" >> .env
#          echo "STRIPE_PUBLIC_KEY=${{ secrets.STRIPE_PUBLIC_KEY }}" >> .env
#          echo "STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}" >> .env
#          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
#          echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST_PROD }}" >> .env
#          echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> .env
#          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
#          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
#          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
#          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
#          echo "KLAVIYO_API_KEY=${{ secrets.PROD_KLAVIYO_API_KEY }}" >> .env
#          echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> .env
#          echo "VERIFICATION_EMAIL=${{ secrets.VERIFICATION_EMAIL }}" >> .env
#          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
#          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
#          echo "AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }}" >> .env
#          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
#
#      - name: Set .env file
#        run: cp .env /home/ubuntu/docker_data/prod
#      - name: Run docker container
#        run: sudo docker compose -f /home/ubuntu/docker_data/prod/docker-compose.yml up -d
